// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc11.proto

/*
Package grpc11protos is a generated protocol buffer package.

It is generated from these files:
	grpc11.proto

It has these top-level messages:
	LoadInfo
	LoadStatus
	GetKeyInfo
	GetKeyStatus
	GenerateInfo
	GenerateStatus
	SignInfo
	SignStatus
	VerifyInfo
	VerifyStatus
	ImportInfo
	ImportStatus
*/
package grpc11protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoadInfo struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Pin   string `protobuf:"bytes,2,opt,name=pin" json:"pin,omitempty"`
}

func (m *LoadInfo) Reset()                    { *m = LoadInfo{} }
func (m *LoadInfo) String() string            { return proto.CompactTextString(m) }
func (*LoadInfo) ProtoMessage()               {}
func (*LoadInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoadInfo) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *LoadInfo) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

type LoadStatus struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *LoadStatus) Reset()                    { *m = LoadStatus{} }
func (m *LoadStatus) String() string            { return proto.CompactTextString(m) }
func (*LoadStatus) ProtoMessage()               {}
func (*LoadStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoadStatus) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LoadStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetKeyInfo struct {
	Ski []byte `protobuf:"bytes,1,opt,name=ski,proto3" json:"ski,omitempty"`
}

func (m *GetKeyInfo) Reset()                    { *m = GetKeyInfo{} }
func (m *GetKeyInfo) String() string            { return proto.CompactTextString(m) }
func (*GetKeyInfo) ProtoMessage()               {}
func (*GetKeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetKeyInfo) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

type GetKeyStatus struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Oid    []byte `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	IsPriv bool   `protobuf:"varint,3,opt,name=isPriv" json:"isPriv,omitempty"`
	Error  string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *GetKeyStatus) Reset()                    { *m = GetKeyStatus{} }
func (m *GetKeyStatus) String() string            { return proto.CompactTextString(m) }
func (*GetKeyStatus) ProtoMessage()               {}
func (*GetKeyStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetKeyStatus) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *GetKeyStatus) GetOid() []byte {
	if m != nil {
		return m.Oid
	}
	return nil
}

func (m *GetKeyStatus) GetIsPriv() bool {
	if m != nil {
		return m.IsPriv
	}
	return false
}

func (m *GetKeyStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GenerateInfo struct {
	Oid       []byte `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Ephemeral bool   `protobuf:"varint,2,opt,name=ephemeral" json:"ephemeral,omitempty"`
}

func (m *GenerateInfo) Reset()                    { *m = GenerateInfo{} }
func (m *GenerateInfo) String() string            { return proto.CompactTextString(m) }
func (*GenerateInfo) ProtoMessage()               {}
func (*GenerateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GenerateInfo) GetOid() []byte {
	if m != nil {
		return m.Oid
	}
	return nil
}

func (m *GenerateInfo) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

type GenerateStatus struct {
	Ski    []byte `protobuf:"bytes,1,opt,name=ski,proto3" json:"ski,omitempty"`
	PubKey []byte `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Error  string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GenerateStatus) Reset()                    { *m = GenerateStatus{} }
func (m *GenerateStatus) String() string            { return proto.CompactTextString(m) }
func (*GenerateStatus) ProtoMessage()               {}
func (*GenerateStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GenerateStatus) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

func (m *GenerateStatus) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *GenerateStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SignInfo struct {
	Ski []byte `protobuf:"bytes,1,opt,name=ski,proto3" json:"ski,omitempty"`
	Msg []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SignInfo) Reset()                    { *m = SignInfo{} }
func (m *SignInfo) String() string            { return proto.CompactTextString(m) }
func (*SignInfo) ProtoMessage()               {}
func (*SignInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SignInfo) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

func (m *SignInfo) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type SignStatus struct {
	Sig   []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *SignStatus) Reset()                    { *m = SignStatus{} }
func (m *SignStatus) String() string            { return proto.CompactTextString(m) }
func (*SignStatus) ProtoMessage()               {}
func (*SignStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SignStatus) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *SignStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type VerifyInfo struct {
	Ski []byte `protobuf:"bytes,1,opt,name=ski,proto3" json:"ski,omitempty"`
	Msg []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Sig []byte `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *VerifyInfo) Reset()                    { *m = VerifyInfo{} }
func (m *VerifyInfo) String() string            { return proto.CompactTextString(m) }
func (*VerifyInfo) ProtoMessage()               {}
func (*VerifyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VerifyInfo) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

func (m *VerifyInfo) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *VerifyInfo) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type VerifyStatus struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *VerifyStatus) Reset()                    { *m = VerifyStatus{} }
func (m *VerifyStatus) String() string            { return proto.CompactTextString(m) }
func (*VerifyStatus) ProtoMessage()               {}
func (*VerifyStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VerifyStatus) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *VerifyStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ImportInfo struct {
	Oid       []byte `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	PrivKey   []byte `protobuf:"bytes,2,opt,name=privKey,proto3" json:"privKey,omitempty"`
	EcPt      []byte `protobuf:"bytes,3,opt,name=ecPt,proto3" json:"ecPt,omitempty"`
	Ephemeral bool   `protobuf:"varint,4,opt,name=ephemeral" json:"ephemeral,omitempty"`
	KeyType   bool   `protobuf:"varint,5,opt,name=keyType" json:"keyType,omitempty"`
}

func (m *ImportInfo) Reset()                    { *m = ImportInfo{} }
func (m *ImportInfo) String() string            { return proto.CompactTextString(m) }
func (*ImportInfo) ProtoMessage()               {}
func (*ImportInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ImportInfo) GetOid() []byte {
	if m != nil {
		return m.Oid
	}
	return nil
}

func (m *ImportInfo) GetPrivKey() []byte {
	if m != nil {
		return m.PrivKey
	}
	return nil
}

func (m *ImportInfo) GetEcPt() []byte {
	if m != nil {
		return m.EcPt
	}
	return nil
}

func (m *ImportInfo) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

func (m *ImportInfo) GetKeyType() bool {
	if m != nil {
		return m.KeyType
	}
	return false
}

type ImportStatus struct {
	Ski   []byte `protobuf:"bytes,1,opt,name=ski,proto3" json:"ski,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ImportStatus) Reset()                    { *m = ImportStatus{} }
func (m *ImportStatus) String() string            { return proto.CompactTextString(m) }
func (*ImportStatus) ProtoMessage()               {}
func (*ImportStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ImportStatus) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

func (m *ImportStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*LoadInfo)(nil), "grpc11protos.LoadInfo")
	proto.RegisterType((*LoadStatus)(nil), "grpc11protos.LoadStatus")
	proto.RegisterType((*GetKeyInfo)(nil), "grpc11protos.GetKeyInfo")
	proto.RegisterType((*GetKeyStatus)(nil), "grpc11protos.GetKeyStatus")
	proto.RegisterType((*GenerateInfo)(nil), "grpc11protos.GenerateInfo")
	proto.RegisterType((*GenerateStatus)(nil), "grpc11protos.GenerateStatus")
	proto.RegisterType((*SignInfo)(nil), "grpc11protos.SignInfo")
	proto.RegisterType((*SignStatus)(nil), "grpc11protos.SignStatus")
	proto.RegisterType((*VerifyInfo)(nil), "grpc11protos.VerifyInfo")
	proto.RegisterType((*VerifyStatus)(nil), "grpc11protos.VerifyStatus")
	proto.RegisterType((*ImportInfo)(nil), "grpc11protos.ImportInfo")
	proto.RegisterType((*ImportStatus)(nil), "grpc11protos.ImportStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grpc11Manager service

type Grpc11ManagerClient interface {
	Load(ctx context.Context, in *LoadInfo, opts ...grpc.CallOption) (*LoadStatus, error)
}

type grpc11ManagerClient struct {
	cc *grpc.ClientConn
}

func NewGrpc11ManagerClient(cc *grpc.ClientConn) Grpc11ManagerClient {
	return &grpc11ManagerClient{cc}
}

func (c *grpc11ManagerClient) Load(ctx context.Context, in *LoadInfo, opts ...grpc.CallOption) (*LoadStatus, error) {
	out := new(LoadStatus)
	err := grpc.Invoke(ctx, "/grpc11protos.Grpc11Manager/Load", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpc11Manager service

type Grpc11ManagerServer interface {
	Load(context.Context, *LoadInfo) (*LoadStatus, error)
}

func RegisterGrpc11ManagerServer(s *grpc.Server, srv Grpc11ManagerServer) {
	s.RegisterService(&_Grpc11Manager_serviceDesc, srv)
}

func _Grpc11Manager_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grpc11ManagerServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc11protos.Grpc11Manager/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grpc11ManagerServer).Load(ctx, req.(*LoadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpc11Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc11protos.Grpc11Manager",
	HandlerType: (*Grpc11ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _Grpc11Manager_Load_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc11.proto",
}

// Client API for Grpc11 service

type Grpc11Client interface {
	GetECKey(ctx context.Context, in *GetKeyInfo, opts ...grpc.CallOption) (*GetKeyStatus, error)
	GenerateECKey(ctx context.Context, in *GenerateInfo, opts ...grpc.CallOption) (*GenerateStatus, error)
	SignP11ECDSA(ctx context.Context, in *SignInfo, opts ...grpc.CallOption) (*SignStatus, error)
	VerifyP11ECDSA(ctx context.Context, in *VerifyInfo, opts ...grpc.CallOption) (*VerifyStatus, error)
	ImportECKey(ctx context.Context, in *ImportInfo, opts ...grpc.CallOption) (*ImportStatus, error)
}

type grpc11Client struct {
	cc *grpc.ClientConn
}

func NewGrpc11Client(cc *grpc.ClientConn) Grpc11Client {
	return &grpc11Client{cc}
}

func (c *grpc11Client) GetECKey(ctx context.Context, in *GetKeyInfo, opts ...grpc.CallOption) (*GetKeyStatus, error) {
	out := new(GetKeyStatus)
	err := grpc.Invoke(ctx, "/grpc11protos.Grpc11/GetECKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpc11Client) GenerateECKey(ctx context.Context, in *GenerateInfo, opts ...grpc.CallOption) (*GenerateStatus, error) {
	out := new(GenerateStatus)
	err := grpc.Invoke(ctx, "/grpc11protos.Grpc11/GenerateECKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpc11Client) SignP11ECDSA(ctx context.Context, in *SignInfo, opts ...grpc.CallOption) (*SignStatus, error) {
	out := new(SignStatus)
	err := grpc.Invoke(ctx, "/grpc11protos.Grpc11/SignP11ECDSA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpc11Client) VerifyP11ECDSA(ctx context.Context, in *VerifyInfo, opts ...grpc.CallOption) (*VerifyStatus, error) {
	out := new(VerifyStatus)
	err := grpc.Invoke(ctx, "/grpc11protos.Grpc11/VerifyP11ECDSA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpc11Client) ImportECKey(ctx context.Context, in *ImportInfo, opts ...grpc.CallOption) (*ImportStatus, error) {
	out := new(ImportStatus)
	err := grpc.Invoke(ctx, "/grpc11protos.Grpc11/ImportECKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpc11 service

type Grpc11Server interface {
	GetECKey(context.Context, *GetKeyInfo) (*GetKeyStatus, error)
	GenerateECKey(context.Context, *GenerateInfo) (*GenerateStatus, error)
	SignP11ECDSA(context.Context, *SignInfo) (*SignStatus, error)
	VerifyP11ECDSA(context.Context, *VerifyInfo) (*VerifyStatus, error)
	ImportECKey(context.Context, *ImportInfo) (*ImportStatus, error)
}

func RegisterGrpc11Server(s *grpc.Server, srv Grpc11Server) {
	s.RegisterService(&_Grpc11_serviceDesc, srv)
}

func _Grpc11_GetECKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grpc11Server).GetECKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc11protos.Grpc11/GetECKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grpc11Server).GetECKey(ctx, req.(*GetKeyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc11_GenerateECKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grpc11Server).GenerateECKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc11protos.Grpc11/GenerateECKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grpc11Server).GenerateECKey(ctx, req.(*GenerateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc11_SignP11ECDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grpc11Server).SignP11ECDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc11protos.Grpc11/SignP11ECDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grpc11Server).SignP11ECDSA(ctx, req.(*SignInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc11_VerifyP11ECDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grpc11Server).VerifyP11ECDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc11protos.Grpc11/VerifyP11ECDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grpc11Server).VerifyP11ECDSA(ctx, req.(*VerifyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc11_ImportECKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grpc11Server).ImportECKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc11protos.Grpc11/ImportECKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grpc11Server).ImportECKey(ctx, req.(*ImportInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpc11_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc11protos.Grpc11",
	HandlerType: (*Grpc11Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetECKey",
			Handler:    _Grpc11_GetECKey_Handler,
		},
		{
			MethodName: "GenerateECKey",
			Handler:    _Grpc11_GenerateECKey_Handler,
		},
		{
			MethodName: "SignP11ECDSA",
			Handler:    _Grpc11_SignP11ECDSA_Handler,
		},
		{
			MethodName: "VerifyP11ECDSA",
			Handler:    _Grpc11_VerifyP11ECDSA_Handler,
		},
		{
			MethodName: "ImportECKey",
			Handler:    _Grpc11_ImportECKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc11.proto",
}

func init() { proto.RegisterFile("grpc11.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0xb5, 0x2c, 0xdb, 0x51, 0xa6, 0x6a, 0x08, 0x4b, 0x08, 0xc2, 0x84, 0x12, 0xf6, 0x94, 0x93,
	0xc1, 0x6e, 0xe9, 0x21, 0x94, 0x42, 0x9d, 0x1a, 0x37, 0xb8, 0x05, 0x23, 0x97, 0xde, 0xe5, 0x78,
	0xac, 0x2e, 0xb1, 0x25, 0xb1, 0x52, 0x0c, 0xba, 0xf7, 0xf7, 0xf6, 0x37, 0x94, 0xfd, 0xd2, 0x2a,
	0xb2, 0x0c, 0xbd, 0xed, 0x9b, 0x9d, 0x79, 0xf3, 0xe6, 0x0b, 0xfc, 0x98, 0x67, 0x4f, 0xe3, 0xf1,
	0x28, 0xe3, 0x69, 0x91, 0x12, 0x8d, 0x24, 0xc8, 0xe9, 0x04, 0xbc, 0xef, 0x69, 0xb4, 0x79, 0x4c,
	0xb6, 0x29, 0xb9, 0x82, 0xfe, 0x2e, 0x5a, 0xe3, 0x2e, 0x70, 0x6e, 0x9d, 0xbb, 0xf3, 0x50, 0x01,
	0x72, 0x09, 0x6e, 0xc6, 0x92, 0xa0, 0x2b, 0x6d, 0xe2, 0x49, 0x3f, 0x01, 0x88, 0x98, 0x55, 0x11,
	0x15, 0x2f, 0x39, 0x09, 0xe0, 0x2c, 0xda, 0x6c, 0x38, 0xe6, 0xb9, 0x8e, 0x33, 0x50, 0xf0, 0x21,
	0xe7, 0x29, 0xd7, 0xb1, 0x0a, 0xd0, 0x77, 0x00, 0x73, 0x2c, 0x16, 0x58, 0xca, 0x9c, 0x97, 0xe0,
	0xe6, 0xcf, 0x4c, 0x46, 0xfa, 0xa1, 0x78, 0xd2, 0x2d, 0xf8, 0xea, 0x5f, 0xf3, 0x5f, 0xc3, 0x20,
	0x7b, 0x59, 0x2f, 0xb0, 0xd4, 0x4e, 0x1a, 0x89, 0xc8, 0x94, 0x6d, 0x24, 0xb7, 0x1f, 0x8a, 0xa7,
	0xf0, 0x64, 0xf9, 0x92, 0xb3, 0x43, 0xe0, 0xde, 0x3a, 0x77, 0x5e, 0xa8, 0x91, 0xd5, 0xd1, 0xab,
	0xeb, 0xf8, 0x2c, 0xf2, 0x24, 0xc8, 0xa3, 0x02, 0x8d, 0x12, 0xc1, 0xe7, 0x58, 0xbe, 0x1b, 0x38,
	0xc7, 0xec, 0x37, 0xee, 0x91, 0x47, 0x3b, 0x99, 0xc7, 0x0b, 0xad, 0x81, 0x2e, 0xe1, 0xc2, 0xc4,
	0x6b, 0xa5, 0x47, 0xb5, 0xd4, 0xb4, 0x77, 0x5f, 0x69, 0xaf, 0x14, 0xb9, 0x75, 0x45, 0x23, 0xf0,
	0x56, 0x2c, 0x4e, 0xda, 0xfb, 0x22, 0x2c, 0xfb, 0x3c, 0x36, 0xf5, 0xee, 0xf3, 0x98, 0x7e, 0x00,
	0x10, 0xfe, 0xb5, 0xec, 0x2c, 0xae, 0x22, 0x58, 0x7c, 0xa2, 0xff, 0x53, 0x80, 0x5f, 0xc8, 0xd9,
	0xb6, 0xfc, 0xdf, 0x3c, 0x86, 0xd9, 0xad, 0x98, 0xe9, 0x3d, 0xf8, 0x8a, 0x43, 0xe7, 0xbe, 0x82,
	0xfe, 0x21, 0xda, 0xe9, 0xee, 0x79, 0xa1, 0x02, 0x27, 0xf2, 0xff, 0x71, 0x00, 0x1e, 0xf7, 0x59,
	0xca, 0x8b, 0x13, 0x6d, 0x0f, 0xe0, 0x2c, 0xe3, 0xec, 0x60, 0xbb, 0x66, 0x20, 0x21, 0xd0, 0xc3,
	0xa7, 0x65, 0xa1, 0x95, 0xc8, 0xf7, 0xeb, 0x21, 0xf5, 0x1a, 0x43, 0x12, 0x5c, 0xcf, 0x58, 0xfe,
	0x2c, 0x33, 0x0c, 0xfa, 0xf2, 0xcf, 0x40, 0xfa, 0x11, 0x7c, 0xa5, 0xe2, 0xe4, 0xf0, 0x5a, 0xe5,
	0x4f, 0x16, 0xf0, 0x76, 0x2e, 0x0f, 0xe8, 0x47, 0x94, 0x44, 0x31, 0x72, 0x72, 0x0f, 0x3d, 0x71,
	0x0d, 0xe4, 0x7a, 0x54, 0x3f, 0xac, 0x91, 0xb9, 0xaa, 0x61, 0x70, 0x6c, 0x57, 0x29, 0x69, 0x67,
	0xf2, 0xb7, 0x0b, 0x03, 0xc5, 0x46, 0xa6, 0xe0, 0xcd, 0xb1, 0x98, 0x3d, 0x88, 0x3a, 0x1b, 0x21,
	0xf6, 0x5c, 0x86, 0xc3, 0xb6, 0x1f, 0x43, 0x47, 0x84, 0x36, 0xbd, 0x92, 0x8a, 0xe8, 0xc8, 0xdd,
	0xee, 0xfb, 0xf0, 0xa6, 0xfd, 0xaf, 0x22, 0x9b, 0x82, 0x2f, 0xb6, 0x6b, 0x39, 0x1e, 0xcf, 0x1e,
	0xbe, 0xae, 0xbe, 0x34, 0xeb, 0x33, 0x9b, 0xda, 0xac, 0xcf, 0x6e, 0x24, 0xed, 0x90, 0x6f, 0x70,
	0xa1, 0xf6, 0xa4, 0x62, 0x69, 0x78, 0xdb, 0x4d, 0x6c, 0x96, 0x56, 0xdf, 0x2f, 0xda, 0x21, 0x33,
	0x78, 0xa3, 0xc6, 0xd5, 0xda, 0x21, 0xbb, 0x4f, 0x4d, 0x9a, 0xfa, 0x8c, 0x69, 0x67, 0x3d, 0x90,
	0xe6, 0xf7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x64, 0xa0, 0xdf, 0x8a, 0x13, 0x05, 0x00, 0x00,
}
